kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: clusterhelper-admin
  labels:
    samples.knative.dev/release: devel
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      samples.knative.dev/controller: "true"
rules: [] # Rules are automatically filled in by the controller manager.
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: clusterhelper-core
  labels:
    samples.knative.dev/release: devel
    samples.knative.dev/controller: "true"
rules:
  # For copying an image pull secret to a target namespace
  - apiGroups: [""]
    resources: ["secrets", "events"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  # For patching default serviceaccount for image secrets
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list", "watch", "patch"]
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["patch"]
    resourceNames:
    - "default"
  # For watching for namespaces
  - apiGroups: [""]
    resources: ["namespaces", "configmaps"]
    verbs: ["get", "list", "watch"]
  # For creating rolebinding for the default service account
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["rolebindings"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  # It's odd, the docs say to use policy, but looks like we need both policy/extensions.
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
  - apiGroups: ["extensions"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
